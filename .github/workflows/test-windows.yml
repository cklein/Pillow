name: Test Windows

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.5", "3.6", "3.7", "3.8", "pypy3"]
        architecture: ["x86", "x64"]
        include:
          - architecture: "x86"
            platform-vcvars: "x86"
            platform-msbuild: "Win32"
          - architecture: "x64"
            platform-vcvars: "x86_amd64"
            platform-msbuild: "x64"
        exclude:
          # PyPy does not support 64-bit on Windows
          - python-version: "pypy3"
            architecture: "x64"
    timeout-minutes: 30

    name: Python ${{ matrix.python-version }} ${{ matrix.architecture }}

    steps:
    - uses: actions/checkout@v1

    - uses: actions/checkout@v1
      with:
        repository: python-pillow/pillow-depends
        ref: master

    - name: Cache
      uses: actions/cache@v1
      with:
        path: ~\AppData\Local\pip\Cache
        key:
          ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}-${{ hashFiles('**/.github/workflows/test-windows.yml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.architecture }}-
          ${{ runner.os }}-${{ matrix.python-version }}-

    # sets env: pythonLocation
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Build system information
      run: python .github/workflows/system-info.py

    - name: pip install wheel pytest pytest-cov
      run: |
        "%pythonLocation%\python.exe" -m pip install wheel pytest pytest-cov
      shell: cmd

    - name: Fetch dependencies
      run: |
        7z x ..\pillow-depends\nasm-2.14.02-win64.zip "-o$env:RUNNER_WORKSPACE\"
        Write-Host "`#`#[add-path]$env:RUNNER_WORKSPACE\nasm-2.14.02"
        Write-Host "::add-path::$env:RUNNER_WORKSPACE\nasm-2.14.02"

        ..\pillow-depends\gs950w32.exe /S
        Write-Host "`#`#[add-path]C:\Program Files (x86)\gs\gs9.50\bin"
        Write-Host "::add-path::C:\Program Files (x86)\gs\gs9.50\bin"

        $env:PYTHON=$env:pythonLocation
        mkdir $env:GITHUB_WORKSPACE\winbuild\depends\
        xcopy ..\pillow-depends\*.zip $env:GITHUB_WORKSPACE\winbuild\depends\
        xcopy ..\pillow-depends\*.tar.gz $env:GITHUB_WORKSPACE\winbuild\depends\
        xcopy /s ..\pillow-depends\test_images\* $env:GITHUB_WORKSPACE\tests\images\
        cd $env:GITHUB_WORKSPACE/winbuild/
        # reg query "HKLM\Software\Microsoft\Microsoft SDKs\Windows" /s
        ls 'C:\Program Files (x86)\Microsoft SDKs\Windows\'
        python.exe $env:GITHUB_WORKSPACE\winbuild\build_prepare.py
      shell: pwsh

    - name: Build dependencies / libjpeg
      run: "& .\\winbuild\\build_dep_libjpeg.cmd"
    - name: Build dependencies / zlib
      run: "& .\\winbuild\\build_dep_zlib.cmd"
    - name: Build dependencies / LibTiff
      run: "& .\\winbuild\\build_dep_libtiff.cmd"
    - name: Build dependencies / WebP
      run: "& .\\winbuild\\build_dep_libwebp.cmd"
    - name: Build dependencies / FreeType
      run: "& .\\winbuild\\build_dep_freetype.cmd"
    - name: Build dependencies / LCMS2
      run: "& .\\winbuild\\build_dep_lcms2.cmd"
    - name: Build dependencies / OpenJPEG
      run: "& .\\winbuild\\build_dep_openjpeg.cmd"

    # GPL licensed; skip if building wheels
    - name: Build dependencies / libimagequant
      if: "github.event_name != 'push' || contains(matrix.python-version, 'pypy')"
      run: |
        set INCLUDE=C:\Program Files (x86)\Microsoft SDKs\Windows\V7.1A\Include
        set INCLIB=%GITHUB_WORKSPACE%\winbuild\depends\msvcr10-x32
        set BUILD=%GITHUB_WORKSPACE%\winbuild\build
        rem e5d454b: Merge tag '2.12.6' into msvc
        cd /D %BUILD%\libimagequant-e5d454bc7f5eb63ee50c84a83a7fa5ac94f68ec4
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.platform-vcvars }}
        echo on
        echo (gc CMakeLists.txt) -replace 'add_library', "add_compile_options(-openmp-)`r`nadd_library" ^| Out-File -encoding ASCII CMakeLists.txt > patch.ps1
        echo (gc CMakeLists.txt) -replace ' SHARED', ' STATIC' ^| Out-File -encoding ASCII CMakeLists.txt >> patch.ps1
        powershell .\patch.ps1
        set CMAKE=cmake.exe -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_RULE_MESSAGES:BOOL=OFF
        set CMAKE=%CMAKE% -DCMAKE_BUILD_TYPE=Release
        %CMAKE% -G "NMake Makefiles" .
        nmake -nologo -f Makefile clean
        nmake -nologo -f Makefile
        copy /Y /B *.h %INCLIB%
        copy /Y /B *.lib %INCLIB%
      shell: cmd

    # for Raqm
    - name: Build dependencies / HarfBuzz
      run: |
        set INCLUDE=C:\Program Files (x86)\Microsoft SDKs\Windows\V7.1A\Include
        set INCLIB=%GITHUB_WORKSPACE%\winbuild\depends\msvcr10-x32
        set BUILD=%GITHUB_WORKSPACE%\winbuild\build
        set INCLUDE=%INCLUDE%;%INCLIB%
        set LIB=%LIB%;%INCLIB%
        cd /D %BUILD%\harfbuzz-2.6.4
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.platform-vcvars }}
        echo on
        set CMAKE=cmake.exe -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_RULE_MESSAGES:BOOL=OFF
        set CMAKE=%CMAKE% -DHB_HAVE_FREETYPE:BOOL=ON -DCMAKE_BUILD_TYPE=Release
        %CMAKE% -G "NMake Makefiles" .
        nmake -nologo -f Makefile clean
        nmake -nologo -f Makefile harfbuzz
        copy /Y /B src\*.h %INCLIB%
        copy /Y /B *.lib %INCLIB%
      shell: cmd

    # for Raqm
    - name: Build dependencies / FriBidi
      run: |
        set INCLUDE=C:\Program Files (x86)\Microsoft SDKs\Windows\V7.1A\Include
        set INCLIB=%GITHUB_WORKSPACE%\winbuild\depends\msvcr10-x32
        set BUILD=%GITHUB_WORKSPACE%\winbuild\build
        cd /D %BUILD%\fribidi-1.0.9
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.platform-vcvars }}
        echo on
        copy /Y /B %GITHUB_WORKSPACE%\winbuild\fribidi.cmake CMakeLists.txt
        set CMAKE=cmake.exe -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_RULE_MESSAGES:BOOL=OFF
        set CMAKE=%CMAKE% -DCMAKE_BUILD_TYPE=Release
        %CMAKE% -G "NMake Makefiles" .
        nmake -nologo -f Makefile clean
        nmake -nologo -f Makefile fribidi
        copy /Y /B lib\*.h %INCLIB%
        copy /Y /B *.lib %INCLIB%
      shell: cmd

    - name: Build dependencies / Raqm
      run: |
        set INCLUDE=C:\Program Files (x86)\Microsoft SDKs\Windows\V7.1A\Include
        set INCLIB=%GITHUB_WORKSPACE%\winbuild\depends\msvcr10-x32
        set BUILD=%GITHUB_WORKSPACE%\winbuild\build
        set INCLUDE=%INCLUDE%;%INCLIB%
        set LIB=%LIB%;%INCLIB%
        cd /D %BUILD%\libraqm-0.7.0
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.platform-vcvars }}
        echo on
        copy /Y /B %GITHUB_WORKSPACE%\winbuild\raqm.cmake CMakeLists.txt
        set CMAKE=cmake.exe -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_RULE_MESSAGES:BOOL=OFF
        set CMAKE=%CMAKE% -DCMAKE_BUILD_TYPE=Release
        %CMAKE% -G "NMake Makefiles" .
        nmake -nologo -f Makefile clean
        nmake -nologo -f Makefile libraqm
        copy /Y /B src\*.h %INCLIB%
        copy /Y /B libraqm.dll %INCLIB%
      shell: cmd

    - name: Build Pillow
      run: |
        cd $env:GITHUB_WORKSPACE
        # & winbuild\build_dep_tcl.cmd
        # & winbuild\build_dep_tk.cmd
        & winbuild\build_pillow.cmd install
        & $env:pythonLocation\python.exe selftest.py --installed
      shell: pwsh

    # failing with PyPy3
    - name: Enable heap verification
      if: "!contains(matrix.python-version, 'pypy')"
      run: |
        c:\"Program Files (x86)"\"Windows Kits"\10\Debuggers\x86\gflags.exe /p /enable %PYTHON%\python.exe
      shell: cmd

    - name: Test Pillow
      run: |
        path %GITHUB_WORKSPACE%\\winbuild\\build\\bin;%PATH%
        python.exe -m pytest -vx -W always --cov PIL --cov Tests --cov-report term --cov-report xml Tests
      shell: cmd

    - name: Prepare to upload errors
      if: failure()
      run: |
        mkdir -p Tests/errors
      shell: pwsh

    - name: Upload errors
      uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: errors
        path: Tests/errors

    - name: After success
      run: |
        .ci/after_success.sh
      shell: pwsh

    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
          file: ./coverage.xml
          flags: GHA_Windows
          name: ${{ runner.os }} Python ${{ matrix.python-version }}

    - name: Build wheel
      id: wheel
      if: "github.event_name == 'push' && !contains(matrix.python-version, 'pypy')"
      run: "%GITHUB_WORKSPACE%\\winbuild\\build_pillow.cmd bdist_wheel"

    - uses: actions/upload-artifact@v1
      if: "github.event_name == 'push' && !contains(matrix.python-version, 'pypy')"
      with:
        name: dist
        path: dist

#    - uses: actions/upload-artifact@v1
#      if: matrix.architecture == 'x86'
#      with:
#        name: lib
#        path: "winbuild\\build\\3.x\\x86\\lib"
